一、基于Session实现登录
step01:发生短信验证码
    开始——提交手机号——校验手机号——N——重新提交手机号
    开始——提交手机号——校验手机号——Y——生产验证码——保存验证码到session——发生验证码——结束
step02:短信验证码登录、注册
    开始———提交手机号和验证码——校验验证码——N——重新提交手机号和验证码
    开始———提交手机号和验证码——校验验证码——Y———根据手机号查询用户——校验用户是否存在——Y——保存用户到session——结束
    开始———提交手机号和验证码——校验验证码——Y———根据手机号查询用户——校验用户是否存在——N——提示用户需要先注册
step03:校验登录状态(拦截器中实现，注册拦截器时需要排除一些不需要拦截的请求)
    开始——请求并携带cookie——从session获取用户——判断用户是否存在——Y——保存用户到ThreadLocal
    开始——请求并携带cookie——从session获取用户——判断用户是否存在——N——拦截请求——结束

session共享问题：在分布式环境中，多台机器不共享session存储空间。


二、基于Redis实现共享session登录
step01:发生短信验证码
    开始——提交手机号——校验手机号——N——重新提交手机号
    开始——提交手机号——校验手机号——Y——生产验证码（String)——保存验证码到Redis（key-手机号，val-验证码，过期时间5MIN）——发送验证码——结束

step02:短语验证码登录、注册 StringRedisTemplate
    开始———提交手机号和验证码——校验验证码——N——重新提交手机号和验证码
    开始———提交手机号和验证码——校验验证码——Y———根据手机号查询用户——校验用户是否存在——Y——保存用户到Redis（key=token,val=user对象，使用Hash结构，过期时间30MIN）——结束
    开始———提交手机号和验证码——校验验证码——Y———根据手机号查询用户——校验用户是否存在——N——提示用户需要先注册

step03:校验登录状态(拦截器中实现，注册拦截器时需要排除一些不需要拦截的请求)
    开始——请求并携带token——从Redis获取用户——判断用户是否存在——Y——保存用户到ThreadLocal——刷新token的有效期
    开始——请求并携带token——从Redis获取用户——判断用户是否存在——N——拦截请求——结束



                                                                           